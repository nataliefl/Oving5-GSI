#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GSIDatabase")]
	public partial class ClassDiagramDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertmedlemmer(medlemmer instance);
    partial void Updatemedlemmer(medlemmer instance);
    partial void Deletemedlemmer(medlemmer instance);
    partial void InsertMedSport(MedSport instance);
    partial void UpdateMedSport(MedSport instance);
    partial void DeleteMedSport(MedSport instance);
    partial void InsertSport(Sport instance);
    partial void UpdateSport(Sport instance);
    partial void DeleteSport(Sport instance);
    #endregion
		
		public ClassDiagramDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GSIDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ClassDiagramDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClassDiagramDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClassDiagramDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClassDiagramDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<medlemmer> medlemmers
		{
			get
			{
				return this.GetTable<medlemmer>();
			}
		}
		
		public System.Data.Linq.Table<MedSport> MedSports
		{
			get
			{
				return this.GetTable<MedSport>();
			}
		}
		
		public System.Data.Linq.Table<Sport> Sports
		{
			get
			{
				return this.GetTable<Sport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.medlemmer")]
	public partial class medlemmer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMedlemmer;
		
		private string _Fornavn;
		
		private string _Etternavn;
		
		private char _Kjonn;
		
		private EntitySet<MedSport> _MedSports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMedlemmerChanging(int value);
    partial void OnidMedlemmerChanged();
    partial void OnFornavnChanging(string value);
    partial void OnFornavnChanged();
    partial void OnEtternavnChanging(string value);
    partial void OnEtternavnChanged();
    partial void OnKjonnChanging(char value);
    partial void OnKjonnChanged();
    #endregion
		
		public medlemmer()
		{
			this._MedSports = new EntitySet<MedSport>(new Action<MedSport>(this.attach_MedSports), new Action<MedSport>(this.detach_MedSports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMedlemmer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idMedlemmer
		{
			get
			{
				return this._idMedlemmer;
			}
			set
			{
				if ((this._idMedlemmer != value))
				{
					this.OnidMedlemmerChanging(value);
					this.SendPropertyChanging();
					this._idMedlemmer = value;
					this.SendPropertyChanged("idMedlemmer");
					this.OnidMedlemmerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fornavn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Fornavn
		{
			get
			{
				return this._Fornavn;
			}
			set
			{
				if ((this._Fornavn != value))
				{
					this.OnFornavnChanging(value);
					this.SendPropertyChanging();
					this._Fornavn = value;
					this.SendPropertyChanged("Fornavn");
					this.OnFornavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etternavn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Etternavn
		{
			get
			{
				return this._Etternavn;
			}
			set
			{
				if ((this._Etternavn != value))
				{
					this.OnEtternavnChanging(value);
					this.SendPropertyChanging();
					this._Etternavn = value;
					this.SendPropertyChanged("Etternavn");
					this.OnEtternavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kjonn", DbType="Char(1) NOT NULL")]
		public char Kjonn
		{
			get
			{
				return this._Kjonn;
			}
			set
			{
				if ((this._Kjonn != value))
				{
					this.OnKjonnChanging(value);
					this.SendPropertyChanging();
					this._Kjonn = value;
					this.SendPropertyChanged("Kjonn");
					this.OnKjonnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="medlemmer_MedSport", Storage="_MedSports", ThisKey="idMedlemmer", OtherKey="idMedlemmer")]
		public EntitySet<MedSport> MedSports
		{
			get
			{
				return this._MedSports;
			}
			set
			{
				this._MedSports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedSports(MedSport entity)
		{
			this.SendPropertyChanging();
			entity.medlemmer = this;
		}
		
		private void detach_MedSports(MedSport entity)
		{
			this.SendPropertyChanging();
			entity.medlemmer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedSport")]
	public partial class MedSport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSport;
		
		private int _idMedlemmer;
		
		private EntityRef<medlemmer> _medlemmer;
		
		private EntityRef<Sport> _Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSportChanging(int value);
    partial void OnidSportChanged();
    partial void OnidMedlemmerChanging(int value);
    partial void OnidMedlemmerChanged();
    #endregion
		
		public MedSport()
		{
			this._medlemmer = default(EntityRef<medlemmer>);
			this._Sport = default(EntityRef<Sport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSport", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idSport
		{
			get
			{
				return this._idSport;
			}
			set
			{
				if ((this._idSport != value))
				{
					if (this._Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSportChanging(value);
					this.SendPropertyChanging();
					this._idSport = value;
					this.SendPropertyChanged("idSport");
					this.OnidSportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMedlemmer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idMedlemmer
		{
			get
			{
				return this._idMedlemmer;
			}
			set
			{
				if ((this._idMedlemmer != value))
				{
					if (this._medlemmer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMedlemmerChanging(value);
					this.SendPropertyChanging();
					this._idMedlemmer = value;
					this.SendPropertyChanged("idMedlemmer");
					this.OnidMedlemmerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="medlemmer_MedSport", Storage="_medlemmer", ThisKey="idMedlemmer", OtherKey="idMedlemmer", IsForeignKey=true)]
		public medlemmer medlemmer
		{
			get
			{
				return this._medlemmer.Entity;
			}
			set
			{
				medlemmer previousValue = this._medlemmer.Entity;
				if (((previousValue != value) 
							|| (this._medlemmer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._medlemmer.Entity = null;
						previousValue.MedSports.Remove(this);
					}
					this._medlemmer.Entity = value;
					if ((value != null))
					{
						value.MedSports.Add(this);
						this._idMedlemmer = value.idMedlemmer;
					}
					else
					{
						this._idMedlemmer = default(int);
					}
					this.SendPropertyChanged("medlemmer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_MedSport", Storage="_Sport", ThisKey="idSport", OtherKey="idSport", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.MedSports.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.MedSports.Add(this);
						this._idSport = value.idSport;
					}
					else
					{
						this._idSport = default(int);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sport")]
	public partial class Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSport;
		
		private string _Navn;
		
		private EntitySet<MedSport> _MedSports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSportChanging(int value);
    partial void OnidSportChanged();
    partial void OnNavnChanging(string value);
    partial void OnNavnChanged();
    #endregion
		
		public Sport()
		{
			this._MedSports = new EntitySet<MedSport>(new Action<MedSport>(this.attach_MedSports), new Action<MedSport>(this.detach_MedSports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSport", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idSport
		{
			get
			{
				return this._idSport;
			}
			set
			{
				if ((this._idSport != value))
				{
					this.OnidSportChanging(value);
					this.SendPropertyChanging();
					this._idSport = value;
					this.SendPropertyChanged("idSport");
					this.OnidSportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Navn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Navn
		{
			get
			{
				return this._Navn;
			}
			set
			{
				if ((this._Navn != value))
				{
					this.OnNavnChanging(value);
					this.SendPropertyChanging();
					this._Navn = value;
					this.SendPropertyChanged("Navn");
					this.OnNavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_MedSport", Storage="_MedSports", ThisKey="idSport", OtherKey="idSport")]
		public EntitySet<MedSport> MedSports
		{
			get
			{
				return this._MedSports;
			}
			set
			{
				this._MedSports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedSports(MedSport entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_MedSports(MedSport entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
	}
}
#pragma warning restore 1591
